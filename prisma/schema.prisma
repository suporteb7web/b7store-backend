// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int           @id @default(autoincrement())
  name      String
  email     String        @unique
  password  String
  token     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt
  addresses UserAddress[]
  orders    Order[]
}

model UserAddress {
  id         Int      @id @default(autoincrement())
  userId     Int
  zipcode    String
  street     String
  number     String
  city       String
  state      String
  country    String
  complement String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  user       User     @relation(fields: [userId], references: [id])
}

model Banner {
  id        Int      @id @default(autoincrement())
  img       String
  link      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Product {
  id          Int               @id @default(autoincrement())
  label       String
  price       Float
  description String?
  categoryId  Int
  viewsCount  Int               @default(0)
  salesCount  Int               @default(0)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now()) @updatedAt
  images      ProductImage[]
  metadata    ProductMetadata[]
  category    Category?         @relation(fields: [categoryId], references: [id])
  orders      OrderProduct[]
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
}

model ProductMetadata {
  id                 Int      @id @default(autoincrement())
  productId          Int
  categoryMetadataId String
  metadataValueId    String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt
  product            Product  @relation(fields: [productId], references: [id])
}

model Category {
  id        Int                @id @default(autoincrement())
  slug      String             @unique
  name      String
  createdAt DateTime           @default(now())
  updatedAt DateTime           @default(now()) @updatedAt
  products  Product[]
  metadata  CategoryMetadata[]
}

model CategoryMetadata {
  id         String          @id
  name       String
  categoryId Int
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @default(now()) @updatedAt
  category   Category        @relation(fields: [categoryId], references: [id])
  values     MetadataValue[]
}

model MetadataValue {
  id                 String           @id
  label              String
  categoryMetadataId String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now()) @updatedAt
  categoryMetadata   CategoryMetadata @relation(fields: [categoryMetadataId], references: [id])
}

model Order {
  id                 Int            @id @default(autoincrement())
  userId             Int
  status             String         @default("pending")
  total              Float
  shippingCost       Float          @default(0)
  shippingDays       Int            @default(0)
  shippingZipcode    String?
  shippingStreet     String?
  shippingNumber     String?
  shippingCity       String?
  shippingState      String?
  shippingCountry    String?
  shippingComplement String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @default(now()) @updatedAt
  orderItems         OrderProduct[]
  user               User           @relation(fields: [userId], references: [id])
}

model OrderProduct {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}
